parameters:
  - name: application
    type: string

stages:
  - stage: build_${{ parameters.application }}
    displayName: Build ${{ parameters.application }}
    variables:
      - group: build-${{ parameters.application }}

    jobs:
      - job: run_build
        displayName: Run Build
        steps:
          - checkout: self
            submodules: true

          - task: NuGetToolInstaller@1
            inputs:
              versionSpec: 5.x

          - task: UseDotNet@2
            displayName: Use .NET Core sdk
            inputs:
              packageType: sdk
              version: 6.0.100
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - powershell: "dotnet --version"

          - powershell: "dotnet --info"

          - task: DotNetCoreCLI@2
            displayName: dotnet restore
            inputs:
              command: restore
              projects: ./app/app.fs.fsproj

          - task: DotNetCoreCLI@2
            displayName: "dotnet build"
            inputs:
              command: build
              publishWebProjects: false # mutually exclusive with 'projects'
              projects: ./app/app.fs.fsproj
              arguments: --configuration Release

          # - task: DotNetCoreCLI@2
          #   inputs:
          #     command: custom
          #     custom: tool
          #     arguments: install --tool-path . dotnet-reportgenerator-globaltool
          #   displayName: dotnet tool install dotnet-reportgenerator

          # - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
          #   displayName: generate reports

          # - task: PublishCodeCoverageResults@1
          #   displayName: publish code coverage
          #   inputs:
          #     codeCoverageTool: Cobertura
          #     summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

          # Finds or downloads and caches the specified version spec of Node.js and adds it to the PATH
          # Node.js tool installer
          - task: NodeTool@0
            inputs:
              versionSpec: "14.17.5"

          - powershell: |
              Write-Output "Running npm ci..."
              npm ci
              Write-Output "Running npm bootstrap..."
              npm run bootstrap
              npm run bootstrap
              Write-Output "Running npm tsc..."
              npm run tsc

              Write-Output "Running npm build..."
              cd "app\web"
              npm run build
            env:
              REACT_APP_BUILD_ID: $(Build.BuildNumber)
            displayName: run npm steps and move build

          - task: DotNetCoreCLI@2
            displayName: dotnet publish
            inputs:
              command: publish
              publishWebProjects: false # mutually exclusive with 'projects'
              projects: ./app/app.fs.fsproj
              arguments: --configuration Release --output $(Build.ArtifactStagingDirectory)

          - task: PublishBuildArtifacts@1
            displayName: drop ArtifactStagingDirectory
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: app
              publishLocation: Container
